{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "KittyADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Avro1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Avro",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "movies"
					}
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Every5Minutes')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "MoviesDataPrepMismatchedRatings",
							"type": "PipelineReference"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2021-01-20T14:12:00",
						"endTime": "2021-01-21T16:36:00",
						"timeZone": "Eastern Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesDataPrep')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesDB",
								"type": "DatasetReference"
							},
							"name": "MoviesDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MisMatchedRatingAvgByGenre",
								"type": "DatasetReference"
							},
							"name": "MisMatchedAvgByRating"
						},
						{
							"dataset": {
								"referenceName": "MisMatchedMovies",
								"type": "DatasetReference"
							},
							"name": "MisMatchedMovies"
						},
						{
							"dataset": {
								"referenceName": "MoviesDB_JSON",
								"type": "DatasetReference"
							},
							"name": "MisMatchedMoviesJSON"
						},
						{
							"dataset": {
								"referenceName": "Avro1",
								"type": "DatasetReference"
							},
							"name": "ByGenreAvro"
						}
					],
					"transformations": [
						{
							"name": "MisMatchedRating"
						},
						{
							"name": "MisMatchedRatingAvgByGenre"
						}
					],
					"script": "source(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> MoviesDB\nMoviesDB filter(toInteger({Rotton Tomato}) >=51 && toInteger(Rating) <=4) ~> MisMatchedRating\nMisMatchedRating aggregate(groupBy(genres),\n\tRating = avg(toInteger(Rating))) ~> MisMatchedRatingAvgByGenre\nMisMatchedRatingAvgByGenre sink(input(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['MisMatchedAvgByRating'],\n\tpartitionBy('hash', 1)) ~> MisMatchedAvgByRating\nMisMatchedRating sink(input(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['MisMatchedMovies.csv'],\n\tpartitionBy('hash', 1)) ~> MisMatchedMovies\nMisMatchedRating sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1) ~> MisMatchedMoviesJSON\nMisMatchedRatingAvgByGenre sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1) ~> ByGenreAvro"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Avro1')]"
			]
		}
	]
}